{"version":3,"sources":["TopBar.js","Compiler.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","children","AppBar","Toolbar","Grid","container","justify","alignItems","map","child","index","item","key","useStyles","makeStyles","theme","root","height","width","Compiler","code","classes","className","display","flexDirection","appBarSpacer","flexGrow","flexShrink","mixins","toolbar","content","padding","spacing","paper","minHeight","fab","position","bottom","right","App","editorRef","React","useRef","useState","setCode","Button","onClick","editor","current","getSession","getValue","color","variant","startIcon","PlayArrow","Link","href","target","IconButton","GitHub","md","xs","Paper","square","ref","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAIe,SAASA,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SAC/B,OACE,oCACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,gBAAgBC,WAAW,UAChDN,EAASO,KAAI,SAACC,EAAOC,GAAR,OACZ,kBAACN,EAAA,EAAD,CAAMO,MAAI,EAACC,IAAKF,GACbD,U,aCRXI,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CAAEC,OAAQ,OAAQC,MAAO,YAGlB,SAASC,EAAT,GAA4B,EAARC,KAAS,IACpCC,EAAUR,IAEhB,OAAO,yBAAKS,UAAWD,EAAQL,OCGjC,IAAMH,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJO,QAAS,OACTC,cAAe,SACfP,OAAQ,QAEVQ,aAAa,aACXC,SAAU,EACVC,WAAY,GACTZ,EAAMa,OAAOC,SAElBC,QAAS,CACPJ,SAAU,EACVR,MAAO,OACPa,QAAShB,EAAMiB,QAAQ,IAEzBrB,KAAM,CACJY,QAAS,OACTG,SAAU,GAEZO,MAAO,CACLP,SAAU,EACVQ,UAAW,KAEbC,IAAK,CACHC,SAAU,QACVC,OAAQtB,EAAMiB,QAAQ,GACtBM,MAAOvB,EAAMiB,QAAQ,QAwEVO,MAtDf,WACE,IAAMlB,EAAUR,IAEV2B,EAAYC,IAAMC,OAAO,MAHlB,EAIWD,IAAME,SAAS,IAJ1B,mBAINvB,EAJM,KAIAwB,EAJA,KAWb,OACE,yBAAKtB,UAAWD,EAAQL,MACtB,kBAAChB,EAAD,KACE,kBAAC6C,EAAA,EAAD,CACEC,QATQ,WAAO,IACbC,EAAWP,EAAUQ,QAArBD,OACRH,EAAQG,EAAOE,aAAaC,aAQtBC,MAAM,UACNC,QAAQ,WACRC,UAAW,kBAACC,EAAA,EAAD,OAJb,OAQA,kBAACC,EAAA,EAAD,CACEJ,MAAM,UACNK,KAAK,+CACLC,OAAO,UAEP,kBAACC,EAAA,EAAD,CAAYP,MAAM,WAChB,kBAACQ,EAAA,EAAD,SAIN,yBAAKrC,UAAWD,EAAQI,eACxB,kBAACrB,EAAA,EAAD,CAAMC,WAAS,EAAC2B,QAAS,EAAGV,UAAWD,EAAQS,SAC7C,kBAAC1B,EAAA,EAAD,CAAMO,MAAI,EAACiD,GAAI,EAAGC,GAAI,GAAIvC,UAAWD,EAAQV,MAC3C,kBAACmD,EAAA,EAAD,CAAOC,QAAM,EAACzC,UAAWD,EAAQY,OAC/B,kBAAC,IAAD,CACE+B,IAAKxB,EACLyB,MApDI,wNAqDJhD,OAAO,OACPC,MAAM,WAIZ,kBAACd,EAAA,EAAD,CAAMO,MAAI,EAACW,UAAWD,EAAQV,MAC5B,kBAACmD,EAAA,EAAD,CAAOC,QAAM,EAACzC,UAAWD,EAAQY,OAC/B,kBAACd,EAAD,CAAU8C,MAAO7C,SC7FT8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.00936b59.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { AppBar, Toolbar, Grid } from \"@material-ui/core\";\n\nexport default function TopBar({ children }) {\n  return (\n    <>\n      <AppBar>\n        <Toolbar>\n          <Grid container justify=\"space-between\" alignItems=\"center\">\n            {children.map((child, index) => (\n              <Grid item key={index}>\n                {child}\n              </Grid>\n            ))}\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: { height: \"100%\", width: \"100%\" },\n}));\n\nexport default function Compiler({ code }) {\n  const classes = useStyles();\n\n  return <div className={classes.root}></div>;\n}\n","import React from \"react\";\n\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/ace\";\nimport \"ace-builds/webpack-resolver\";\n\nimport { Link, IconButton, Button, Grid, Paper } from \"@material-ui/core\";\nimport { GitHub, PlayArrow } from \"@material-ui/icons\";\n\nimport TopBar from \"./TopBar\";\nimport Compiler from \"./Compiler\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    height: \"99vh\",\n  },\n  appBarSpacer: {\n    flexGrow: 0,\n    flexShrink: 0,\n    ...theme.mixins.toolbar,\n  },\n  content: {\n    flexGrow: 1,\n    width: \"100%\",\n    padding: theme.spacing(1),\n  },\n  item: {\n    display: \"flex\",\n    flexGrow: 1,\n  },\n  paper: {\n    flexGrow: 1,\n    minHeight: 500,\n  },\n  fab: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}));\n\nconst codeTemplate = `PRINT \"How many fibonacci numbers do you want?\"\nINPUT nums\nPRINT \"\"\n\nLET a = 0\nLET b = 1\nWHILE nums > 0 REPEAT\n    PRINT a\n    LET c = a + b\n    LET a = b\n    LET b = c\n    LET nums = nums - 1\nENDWHILE`;\n\nfunction App() {\n  const classes = useStyles();\n\n  const editorRef = React.useRef(null);\n  const [code, setCode] = React.useState(\"\");\n\n  const compile = () => {\n    const { editor } = editorRef.current;\n    setCode(editor.getSession().getValue());\n  };\n\n  return (\n    <div className={classes.root}>\n      <TopBar>\n        <Button\n          onClick={compile}\n          color=\"inherit\"\n          variant=\"outlined\"\n          startIcon={<PlayArrow />}\n        >\n          Run\n        </Button>\n        <Link\n          color=\"inherit\"\n          href=\"https://github.com/thetimmorland/micro-lang/\"\n          target=\"_blank\"\n        >\n          <IconButton color=\"inherit\">\n            <GitHub />\n          </IconButton>\n        </Link>\n      </TopBar>\n      <div className={classes.appBarSpacer} />\n      <Grid container spacing={1} className={classes.content}>\n        <Grid item md={6} xs={12} className={classes.item}>\n          <Paper square className={classes.paper}>\n            <AceEditor\n              ref={editorRef}\n              value={codeTemplate}\n              height=\"100%\"\n              width=\"100%\"\n            />\n          </Paper>\n        </Grid>\n        <Grid item className={classes.item}>\n          <Paper square className={classes.paper}>\n            <Compiler value={code} />\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CssBaseline } from \"@material-ui/core\"\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}